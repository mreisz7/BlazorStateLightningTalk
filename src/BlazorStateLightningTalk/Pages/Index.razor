@page "/"

<div @onkeydown="@HandleKeyDown"
     @ontouchmove="@HandleTouchMove"
     @ontouchstart="@HandleTouchStart"
     @ontouchstart:preventDefault="true"
     @ontouchstart:stopPropagation="true"
     @ref="@_slideContainerRef"
     tabindex="0">
    @for (var i = 0; i < Slides.Count; i++)
    {
        var slideType = Type.GetType($"BlazorStateLightningTalk.Slides.{Slides[i]}");
        Dictionary<string, object> parameters = new()
        {
            { "IsCurrent", i.Equals(_currentSlide) },
            { "IsPastSlide", i < _currentSlide },
            { "SlideStopIndex", _currentSlideStopIndex },
            { "OnIncrementSlide", EventCallback.Factory.Create(this, IncrementSlides) },
            { "OnDecrementSlide", EventCallback.Factory.Create(this, DecrementSlides) }
        };
        if (slideType is not null)
        {
            <SlideFrame CurrentSlideIndex=@_currentSlide
                        SlideIndex=@i>
                <DynamicComponent Parameters=@parameters
                                  Type=@slideType />
            </SlideFrame>
        }
    }
</div>

<footer>
    <span>@($"{_currentSlide + 1} / {Slides.Count}")</span>
</footer>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _slideContainerRef.FocusAsync();
        }
    }

    private List<string> Slides { get; } =
    [
        nameof(TitlePage),
        nameof(CascadingValueExample),
        nameof(DependencyInjectionExample),
        nameof(ContactUs),
        nameof(AdditionalResources)
    ];

    private int _currentSlide;
    private int _currentSlideStopIndex;

    private ElementReference _slideContainerRef;

    private double? _xTouchStart;
    private double? _yTouchStart;

    private void Increment()
    {
        if (_currentSlide + 1 < Slides.Count)
        {
            _currentSlideStopIndex++;
        }
    }

    private void Decrement()
    {
        if (_currentSlide > 0)
        {
            _currentSlideStopIndex--;
        }
    }

    private void IncrementSlides()
    {
        if (_currentSlide + 1 < Slides.Count)
        {
            _currentSlide++;
            _currentSlideStopIndex = 0;
        }
    }

    private void DecrementSlides()
    {
        if (_currentSlide > 0)
        {
            _currentSlide--;
            _currentSlideStopIndex = 0;
        }
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        switch (e.Code)
        {
            case "KeyH":
                _currentSlide = 0;
                break;
            case "ArrowRight":
            case "ArrowDown":
            case "Space":
            case "Enter":
            case "PageDown":
                Increment();
                break;
            case "ArrowLeft":
            case "ArrowUp":
            case "PageUp":
                Decrement();
                break;
        }
    }

    private void HandleTouchStart(TouchEventArgs e)
    {
        _xTouchStart = e.Touches[0].ClientX;
        _yTouchStart = e.Touches[0].ClientY;
    }

    private void HandleTouchMove(TouchEventArgs e)
    {
        if (_xTouchStart is not null && _yTouchStart is not null)
        {
            var xTouchMove = e.Touches[0].ClientX;
            var yTouchMove = e.Touches[0].ClientY;

            var xTouchDiff = (double)_xTouchStart - xTouchMove;
            var yTouchDiff = (double)_yTouchStart - yTouchMove;

            if (Math.Abs(xTouchDiff) > Math.Abs(yTouchDiff))
            {
                switch (xTouchDiff)
                {
                    case > 0:
                        // Right Swipe triggered
                        IncrementSlides();
                        break;
                    default:
                        // Left Swipe triggered
                        DecrementSlides();
                        break;
                }
            }
            else
            {
                // Up Swipe triggered
                // Down Swipe triggered
                Console.WriteLine(yTouchDiff > 0 ? "Down Swipe" : "Up Swipe");
            }
        }

        _xTouchStart = null;
        _yTouchStart = null;
    }

}
