@page "/"

<div @onkeydown="@HandleKeyDown"
     @ontouchmove="@HandleTouchMove"
     @ontouchstart="@HandleTouchStart"@ref="@SlideContainerRef"tabindex="0">
    @for (var i = 0; i < Slides.Count; i++)
    {
        var slideType = Type.GetType($"BlazorStateLightningTalk.Slides.{Slides[i]}");
        Dictionary<string, object> parameters = new()
        {
            { "IsCurrent", i == CurrentSlide },
            { "IsPastSlide", i < CurrentSlide },
            { "SlideStopIndex", CurrentSlideStopIndex },
            { "OnIncrementSlide", EventCallback.Factory.Create(this, IncrementSlides) },
            { "OnDecrementSlide", EventCallback.Factory.Create(this, DecrementSlides) }
        };
        if (slideType is not null)
        {
            <SlideFrame CurrentSlideIndex=@CurrentSlide
                        SlideIndex=@i>
                <DynamicComponent Parameters=@parameters
                                  Type=@slideType />
            </SlideFrame>
        }
    }
</div>

<footer>
    <span>@($"{CurrentSlide + 1} / {Slides.Count}")</span>
</footer>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SlideContainerRef.FocusAsync();
        }
    }

    public List<string> Slides { get; set; } = new()
    {
        // Title
        nameof(TitlePage),

        nameof(AboutReact),
        nameof(AboutBlazor),
        nameof(DeveloperSurveyResults),
        nameof(ToolsAndEcosystem),
        nameof(Development),
        nameof(ComparisonComponentStructure),
        nameof(ComparisonRouting),
        nameof(ComparisonPersistentState),

        nameof(ReactProsAndCons),
        nameof(BlazorProsAndCons),

        // Qustions/Contact
        nameof(ContactUs),
        nameof(AdditionalResources)
    };

    public int CurrentSlide          = 0;
    public int CurrentSlideStopIndex = 0;

    private ElementReference SlideContainerRef;

    private double? xTouchStart = null;
    private double? yTouchStart = null;

    private void Increment()
    {
        if (CurrentSlide + 1 < Slides.Count)
        {
            CurrentSlideStopIndex++;
        }
    }

    private void Decrement()
    {
        if (CurrentSlide > 0)
        {
            CurrentSlideStopIndex--;
        }
    }

    private void IncrementSlides()
    {
        if (CurrentSlide + 1 < Slides.Count)
        {
            CurrentSlide++;
            CurrentSlideStopIndex = 0;
        }
    }

    private void DecrementSlides()
    {
        if (CurrentSlide > 0)
        {
            CurrentSlide--;
            CurrentSlideStopIndex = 0;
        }
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "KeyH")
        {
            CurrentSlide = 0;
        }

        if (e.Code == "ArrowRight" || e.Code == "ArrowDown" || e.Code == "Space" || e.Code == "Enter" || e.Code == "PageDown")
        {
            Increment();
        }

        if (e.Code == "ArrowLeft" || e.Code == "ArrowUp" || e.Code == "PageUp")
        {
            Decrement();
        }
    }

    private void HandleTouchStart(TouchEventArgs e)
    {
        xTouchStart = e.Touches[0].ClientX;
        yTouchStart = e.Touches[0].ClientY;
    }

    private void HandleTouchMove(TouchEventArgs e)
    {
        if (xTouchStart is not null && yTouchStart is not null)
        {
            var xTouchMove = e.Touches[0].ClientX;
            var yTouchMove = e.Touches[0].ClientY;

            var xTouchDiff = (double)xTouchStart - xTouchMove;
            var yTouchDiff = (double)yTouchStart - yTouchMove;

            if (Math.Abs(xTouchDiff) > Math.Abs(yTouchDiff))
            {
                if (xTouchDiff > 0)
                {
                    // Right Swipe triggered
                    IncrementSlides();
                }
                else
                {
                    // Left Swipe triggered
                    DecrementSlides();
                }
            }
            else
            {
                if (yTouchDiff > 0)
                {
                    // Down Swipe triggered
                    Console.WriteLine("Down Swipe");
                }
                else
                {
                    // Up Swipe triggered
                    Console.WriteLine("Up Swipe");
                }
            }
        }

        xTouchStart = null;
        yTouchStart = null;
    }

}
